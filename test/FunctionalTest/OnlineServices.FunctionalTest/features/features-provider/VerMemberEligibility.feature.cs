// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Bupa.OnlineServices.FunctionalTest.Features.Features_Provider
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [TechTalk.SpecRun.FeatureAttribute("VerificationMemberEligibility", Description="\tVerification of member eligibility\r\n\tin order to access the information of the m" +
        "embers of a policy\r\n\tAs a provider user\r\n\tI want to validate the eligibility of " +
        "members associated with a policy", SourceFile="features\\features-provider\\VerMemberEligibility.feature", SourceLine=0)]
    public partial class VerificationMemberEligibilityFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "VerMemberEligibility.feature"
#line hidden
        
        [TechTalk.SpecRun.FeatureInitialize()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "VerificationMemberEligibility", "\tVerification of member eligibility\r\n\tin order to access the information of the m" +
                    "embers of a policy\r\n\tAs a provider user\r\n\tI want to validate the eligibility of " +
                    "members associated with a policy", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [TechTalk.SpecRun.FeatureCleanup()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        [TechTalk.SpecRun.ScenarioCleanup()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void SuccessfulSearchForPolicy(string policy, string dob, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successful search for policy", null, @__tags);
#line 8
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 9
 testRunner.Given("I am on the Eligility  page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.When("I select the option searched by the policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 11
 testRunner.And(string.Format("I insert {0} and {1}", policy, dob), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 12
    testRunner.Then("I must see a message Verificación de elegibilidad · VOE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Successful search for policy, 222558", SourceLine=15)]
        [TechTalk.SpecRun.IgnoreAttribute()]
        public virtual void SuccessfulSearchForPolicy_222558()
        {
#line 8
this.SuccessfulSearchForPolicy("222558", "02-04-1940", ((string[])(null)));
#line hidden
        }
        
        public virtual void SuccessfulSearchForMember(string firstname, string lastname, string dob, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore",
                    "VerificationMemberEligibility"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Successful search for member", null, @__tags);
#line 19
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 20
 testRunner.Given("I am on the Eligility  page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 21
 testRunner.When("I select the option searched by member", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 22
 testRunner.And(string.Format("I register {0} and {1} and {2}", firstname, lastname, dob), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 23
 testRunner.Then("I must see a message Verificación de elegibilidad · VOE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Successful search for member, ASIRB", new string[] {
                "VerificationMemberEligibility"}, SourceLine=26)]
        [TechTalk.SpecRun.IgnoreAttribute()]
        public virtual void SuccessfulSearchForMember_ASIRB()
        {
#line 19
this.SuccessfulSearchForMember("ASIRB", "QDER WWHLEAVWAB", "02-04-1940", ((string[])(null)));
#line hidden
        }
        
        public virtual void SearchByNumberOfPolicyNotExisting(string policy, string dob, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore",
                    "VerificationMemberEligibility"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search by number of policy not existing", null, @__tags);
#line 30
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 31
 testRunner.Given("I am on the Eligility  page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 32
 testRunner.When("I select the option searched by the policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 33
 testRunner.And(string.Format("I insert {0} and {1}", policy, dob), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 34
    testRunner.But("the Policy Number does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line 35
 testRunner.Then("I must see an error  En este momento no podemos verificar la elegibilidad del ase" +
                    "gurado. Por favor contacte con BGLA vía email usamed@bupalatinamerica.com o llam" +
                    "e al +1 305 275 1500 para obtener más información.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search by number of policy not existing, 22257899", new string[] {
                "VerificationMemberEligibility"}, SourceLine=38)]
        [TechTalk.SpecRun.IgnoreAttribute()]
        public virtual void SearchByNumberOfPolicyNotExisting_22257899()
        {
#line 30
this.SearchByNumberOfPolicyNotExisting("22257899", "04-02-1940", ((string[])(null)));
#line hidden
        }
        
        public virtual void SearchByDateOfBirthDoesNotCorrespondToTheRegisteredOne(string policy, string dob, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore",
                    "VerificationMemberEligibility"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search by date of birth Does not correspond to the registered one", null, @__tags);
#line 42
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 43
 testRunner.Given("I am on the Eligility  page", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 44
 testRunner.When("I select the option searched by the policy", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 45
 testRunner.And(string.Format("I insert {0} and {1}", policy, dob), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 46
    testRunner.But("the Date of Birth does not exist", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line 47
 testRunner.Then("I must see an error  En este momento no podemos verificar la elegibilidad del ase" +
                    "gurado. Por favor contacte con BGLA vía email usamed@bupalatinamerica.com o llam" +
                    "e al +1 305 275 1500 para obtener más información.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Search by date of birth Does not correspond to the registered one, 222558", new string[] {
                "VerificationMemberEligibility"}, SourceLine=51)]
        [TechTalk.SpecRun.IgnoreAttribute()]
        public virtual void SearchByDateOfBirthDoesNotCorrespondToTheRegisteredOne_222558()
        {
#line 42
this.SearchByDateOfBirthDoesNotCorrespondToTheRegisteredOne("222558", "07-01-1986", ((string[])(null)));
#line hidden
        }
        
        public virtual void AccessDocumentEligibilityVerification(string policy, string dob, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore",
                    "VerificationMemberEligibility"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Access document eligibility verification", null, @__tags);
#line 55
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 56
 testRunner.Given(string.Format("I text {0} and {1}", policy, dob), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 57
 testRunner.When("I click on the Login button verify Elegibility", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line 58
 testRunner.Then("I should see the Eligibility verification document", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [TechTalk.SpecRun.ScenarioAttribute("Access document eligibility verification, 222558", new string[] {
                "VerificationMemberEligibility"}, SourceLine=61)]
        [TechTalk.SpecRun.IgnoreAttribute()]
        public virtual void AccessDocumentEligibilityVerification_222558()
        {
#line 55
this.AccessDocumentEligibilityVerification("222558", "02-04-1940", ((string[])(null)));
#line hidden
        }
        
        [TechTalk.SpecRun.TestRunCleanup()]
        public virtual void TestRunCleanup()
        {
            TechTalk.SpecFlow.TestRunnerManager.GetTestRunner().OnTestRunEnd();
        }
    }
}
#pragma warning restore
#endregion
