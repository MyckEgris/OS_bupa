import { Email } from './email';
import { Address } from './address';
import { Phone } from './phone';
import { Member } from './member';
import { Rider } from './rider';
import { Petitioner } from './petitioner';
import { Identification } from './identification';
import { Beneficiary } from './beneficiary';
import { OtherInsurance } from './other-insurance';
import { Agreement } from './agreement';
import { CreditCard } from './credit-card';
import { MedicalQuestion } from '../../medical-questionaries/entities/medical-question';
import { MedicalHistory } from '../../medical-questionaries/entities/medical-history';
import { PetitionerInformation } from './petitioner-information';
import { Rule } from './rule';
import { ApplicationDocument } from './application-document';
import { MemberExtension } from './member-extension';
import { PersonalInterview } from './personal-interview';
import { QuoteRequest } from '../../quote/entities/quote-request.model';
import { RuleByBusiness } from '../../common/entities/rule-by-business';

export interface PolicyApplicationModel {
    applicationId: number;
    applicationGuid: string;
    agentId: number;
    agent: string;
    policyId: string;
    process: string;
    enrollmentTypeId: number;
    enrollmentType: string;
    requestorFirstName: string;
    requestorLastName: string;
    requestorTypeId: number;
    requestorEmail: string;
    requestorPhone: string;
    requestorType: string;
    issueDate: Date;
    stampDate: Date;
    signedDate: Date;
    countryId: number;
    country: string;
    cityId: number;
    city: string;
    productId: number;
    product: string;
    planId: number;
    plan: string;
    insuranceBusinessId: number;
    insuranceBusiness: string;
    businessModeId: number;
    businessMode: string;
    receivedMethodId: number;
    receiveMethod: string;
    languageId: number;
    language: string;
    modeOfPaymentId: number;
    modeOfPayment: string;
    paymentMethodId: number;
    paymentMethod: string;
    updatedBy: string;
    updatedOn: Date;
    status: string;
    createdOn: Date;
    daysElapsed: number;
    addresses: Array<Address>;
    phones: Array<Phone>;
    emails: Array<Email>;
    members: Array<Member>;
    riders: Array<Rider>;
    documents: Array<ApplicationDocument>;
    petitioner: PetitionerInformation;
    paperless: boolean;
    petitionerTypeId: number;
    identifications:  Array<Identification>;
    viewTemplateId: number;
    beneficiary: Beneficiary;
    otherInsurance: OtherInsurance;
    agreements: Agreement[];
    promoterKey: string;
    promoterEmail: string;
    medicalQuestion: Array<MedicalQuestion>;
    medicalHistory: Array<MedicalHistory>;
    creditCard: CreditCard;
    rules: Array<RuleByBusiness>;
    personalInterview?: PersonalInterview;
    quoteRequest?: QuoteRequest;
    currentStepCompleted?: string;
}
